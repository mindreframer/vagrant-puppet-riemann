; vim: filetype=clojure
; http://riemann.io/api/riemann.server.html
; https://github.com/pculture/amara-metrics/blob/master/modules/riemann/files/riemann.config (example)

(logging/init :file "/var/log/riemann.log")

(tcp-server :host "<%= scope.lookupvar('riemann::params::riemann_server_ip') %>" :port 5555)
(udp-server :host "<%= scope.lookupvar('riemann::params::riemann_server_ip') %>" :port 5555)
(ws-server :host "<%= scope.lookupvar('riemann::params::riemann_server_ip') %>" :port 5556)

(periodically-expire 10)



(let [client (tcp-client :host "<%= scope.lookupvar('riemann::params::riemann_server_ip') %>")
      ; Keep events for 5 minutes by default
      index (default :ttl 300 (update-index (index)))
      hosts (atom #{})]



  ; email to mailcatcher
  (def email (mailer {:host "127.0.0.1" :port 1025 :from "riemann@localhost.dev"}))

  ; this will send mostly 5 mails, then aggregate for 5 minutes (300 seconds)
  (def tell-ops
    ; store max 100000 per hour
   (throttle 100000 3600
      ; send max 10 mails per 5 minutes
      (rollup 10 60
        (email "roman.heinrich@gmail.com"))))

  ; graphite
  ;(def graph (graphite {:host "my.graphite.server"}))

  (streams
    ;(with {:metric_f 1 :host nil :state "ok" :service "events/sec"}
    ;  (rate 5 index))

    (where (service #"^per")
      (percentiles 5 [0 0.5 0.95 0.99 1]
        index))


    ; email all critial events
    (where (state "critical") tell-ops)
    ; all errors
    (where (state "error") tell-ops)
    ; all tags exception
    (tagged "exception" tell-ops)

    ; if something changed state from OK -> tell me
    (changed :state {:init "ok"} tell-ops)


    ; (where (tagged "exception")
    ;   (with :metric 1
    ;     (by :service
    ;       (adjust [:service (str " exception rate")]
    ;         (rate 10 index graph)))))


    ; Log expired events.
    (expired
      (fn [event] (info "expired" event)))


    ; (fn [event] ;; pass the event through a function that:
    ;   (swap! hosts conj (:host event)) ;; adds the event host into the host set
    ;   (prn :hosts @hosts) ;; prints out the host set
    ;   (index {:service "unique hosts" ;; indexes the count
    ;           :time (unix-time)
    ;           :metric (count @hosts)})))

    ;; index everything
    index
))