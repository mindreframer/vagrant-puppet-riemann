#!/usr/bin/env ruby
require 'rubygems'
require 'optparse'
require 'pp'
require 'riemann/client'
require 'riemann/tools'


options = {}

optparse = OptionParser.new do|opts|
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end

  options[:simulation] = ""
  opts.on( '-s', '--simulation KIND', "Simulation Kind - health/web" ) do|f|
    options[:simulation] = f
  end

  options[:requests] = 10000
  opts.on( '-r', '--requests NUM', Integer, "how many requests", "defaults to #{options[:requests]}") do |f|
    options[:requests] = f
  end
end
optparse.parse!


SERVERS = %w(www worker).map{|x| 1.upto(10).map do |i| "#{x}#{i.to_s.rjust(2, '0')}" end }.flatten
REQUESTS_COUNT = options[:requests]
# http://riemann.io/concepts.html

# host  A hostname, e.g. "api1", "foo.com"
# service e.g. "API port 8000 reqs/sec"
# state Any string less than 255 bytes, e.g. "ok", "warning", "critical"
# time  The time of the event, in unix epoch seconds
# description Freeform text
# tags  Freeform list of strings, e.g. ["rate", "fooproduct", "transient"]
# metric  A number associated with this event, e.g. the number of reqs/sec.
# ttl A floating-point time, in seconds, that this event is considered valid for. Expired states may be removed from the index.

class Simulator
  def self.client
    @client ||= Riemann::Client.new(:host => "<%= scope.lookupvar('riemann::params::riemann_server_ip') %>")
  end

  def self.web_traffic
    REQUESTS_COUNT.times do
      send_web_request
      sleep 0.1
    end
  end

  def self.health_traffic
    REQUESTS_COUNT.times do
      send_health_request
      sleep 0.1
    end
  end

  def self.complete_traffic
    puts "starting complete traffic"
    t1 = Thread.new{Simulator.health_traffic}
    t2 = Thread.new{Simulator.web_traffic}
    t1.join
    t2.join
    puts "End at #{Time.now}"
  end

  def self.send_web_request
    metric = rand(5000)/100.0
    state  = metric < 20 ? "ok" : (metric > 40 ?  "critical" : "warning")
    client << {
      :host        => SERVERS[rand(SERVERS.size)],
      :service     => "http req",
      :metric      => metric,
      :state       => state,
      :description => "Request took #{metric} seconds.",
      :tags        => ["prod", "webserver"]
    }
  end

  def self.send_health_request
    [:cpu, :disk, :memory].each do |service|
      report_pct service, (rand(100)+1)/100.0, ""
    end
    report_value(:load, rand(10), "")
    # cpu
    # load
    # disk
    # memory
  end

  def self.limits
    @limits ||= {
      :cpu    => {:warning => 0.9, :critical => 0.95},
      :disk   => {:warning => 0.9, :critical => 0.95},
      :memory => {:warning => 0.85, :critical => 0.95},
      :load   => {:warning => 3, :critical => 8}
    }
  end

  def self.report_pct(service, fraction, report)
    if fraction
      if fraction > limits[service][:critical]
        alert service, :critical, fraction, "#{sprintf("%.2f", fraction * 100)}% #{report}"
      elsif fraction > limits[service][:warning]
        alert service, :warning, fraction, "#{sprintf("%.2f", fraction * 100)}% #{report}"
      else
        alert service, :ok, fraction, "#{sprintf("%.2f", fraction * 100)}% #{report}"
      end
    end
  end

  def self.report_value(service, metric, report)
    if metric
      if metric > limits[service][:critical]
        alert service, :critical, metric, "#{sprintf("%.2f", metric)}% #{report}"
      elsif metric > limits[service][:warning]
        alert service, :warning, metric, "#{sprintf("%.2f", metric )}% #{report}"
      else
        alert service, :ok, metric, "#{sprintf("%.2f", metric)}% #{report}"
      end
    end
  end

  def self.alert(service, state, metric, description)
    client << {
      :host        => SERVERS[rand(SERVERS.size)],
      :service     => service.to_s,
      :state       => state.to_s,
      :metric      => metric.to_f,
      :description => description
    }
  end
end

case options[:simulation]
  when "health" then Simulator.health_traffic
  when "web"    then Simulator.web_traffic
  else               Simulator.complete_traffic
end
