#!/usr/bin/env ruby
require 'rubygems'
require 'riemann/client'

SERVERS = %w(www worker).map{|x| 1.upto(10).map do |i| "#{x}#{i.to_s.rjust(2, '0')}" end }.flatten

# http://riemann.io/concepts.html

# host  A hostname, e.g. "api1", "foo.com"
# service e.g. "API port 8000 reqs/sec"
# state Any string less than 255 bytes, e.g. "ok", "warning", "critical"
# time  The time of the event, in unix epoch seconds
# description Freeform text
# tags  Freeform list of strings, e.g. ["rate", "fooproduct", "transient"]
# metric  A number associated with this event, e.g. the number of reqs/sec.
# ttl A floating-point time, in seconds, that this event is considered valid for. Expired states may be removed from the index.

class Simulator
  def self.client
    @client ||= Riemann::Client.new(:host => "<%= scope.lookupvar('riemann::params::riemann_server_ip') %>")
  end

  def self.web_traffic
    10000.times do
      send_web_request
      sleep 0.1
    end
  end

  def self.health_traffic

  end

  def self.send_web_request
    metric = rand(5000)/100.0
    state  = metric < 20 ? "ok" : (metric > 40 ?  "critical" : "warning")
    client << {
      :host        => SERVERS[rand(SERVERS.size)],
      :service     => "http req",
      :metric      => metric,
      :state       => state,
      :description => "Request took #{metric} seconds.",
      :tags        => ["prod", "webserver"]
    }
  end

  def self.send_health_request

  end
end

Simulator.web_traffic